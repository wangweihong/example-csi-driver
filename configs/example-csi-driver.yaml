# example-grpc 全配置
kubernetes:
  kubeconfig:

driver:
  name:
  node-id:
  max-volume: 0
  controller: false

# 通用服务配置
server:
  reflect: false # 是否安装反射服务。如果开启, 则可以通过反射获取gRPC服务信息。默认 false
  version: true # 是否安装版本服务，默认 true
  debug: false # 是否安装调试服务，默认 false
  max-msg-size:   4194304 # 消息最多字节数, 默认4M
  unary-interceptors: requestid,context,logger,recovery # unary拦截器
  runtime-debug: true # 启动运行时调试, 可通过Linux信号触发进行程序性能采集等。
  runtime-debug-dir: ${EXAMPLE_GRPC_RUNTIME_DEBUG_OUTPUT_DIR} # 运行时调试时采集的数据存放目录

# gRPC 服务器配置
unix:
  socket: ${EXAMPLE_CSI_DRIVER_UNIX_SOCKET}

# 日志配置
log:
  name: example-grpc # Logger的名字
  development: true # 是否是开发模式。如果是开发模式，会对DPanicLevel进行堆栈跟踪。
  level: debug # 日志级别，优先级从低到高依次为：debug, info, warn, error, dpanic, panic, fatal。
  format: console # 支持的日志输出格式，目前支持console和json两种。console其实就是text格式。
  enable-color: true # 是否开启颜色输出，true:是，false:否
  disable-caller: false # 是否开启 caller，如果开启会在日志中显示调用日志所在的文件、函数和行号
  disable-stacktrace: false # 是否再panic及以上级别禁止打印堆栈信息
  output-paths: ${EAZYCLOUD_LOG_DIR}/example-grpc.log,stdout # 支持输出到多个输出，逗号分开。支持输出到标准输出（stdout）和文件。
  error-output-paths: ${EAZYCLOUD_LOG_DIR}/example-grpc.error.log # zap内部(非业务)错误日志输出路径，多个输出，逗号分开
